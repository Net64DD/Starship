lua.new_usertype<PlayerShot>("PlayerShot",
    "obj", sol::property(&PlayerShot::obj, &PlayerShot::obj),
    "index", sol::property(&PlayerShot::index, &PlayerShot::index),
    "vel", sol::property(&PlayerShot::vel, &PlayerShot::vel),
    "vec_2C", sol::property(&PlayerShot::vec_2C, &PlayerShot::vec_2C),
    "sfxSource", sol::property(&PlayerShot::sfxSource, &PlayerShot::sfxSource),
    "scale", sol::property(&PlayerShot::scale, &PlayerShot::scale),
    "unk_48", sol::property(&PlayerShot::unk_48, &PlayerShot::unk_48),
    "unk_4C", sol::property(&PlayerShot::unk_4C, &PlayerShot::unk_4C),
    "unk_50", sol::property(&PlayerShot::unk_50, &PlayerShot::unk_50),
    "unk_54", sol::property(&PlayerShot::unk_54, &PlayerShot::unk_54),
    "unk_58", sol::property(&PlayerShot::unk_58, &PlayerShot::unk_58),
    "unk_5C", sol::property(&PlayerShot::unk_5C, &PlayerShot::unk_5C),
    "unk_60", sol::property(&PlayerShot::unk_60, &PlayerShot::unk_60),
    "timer", sol::property(&PlayerShot::timer, &PlayerShot::timer),
    "sourceId", sol::property(&PlayerShot::sourceId, &PlayerShot::sourceId),
    "bonus", sol::property(&PlayerShot::bonus, &PlayerShot::bonus)
);

lua.new_usertype<ArwingInfo>("ArwingInfo",
    "rightWingState", sol::property(&ArwingInfo::rightWingState, &ArwingInfo::rightWingState),
    "leftWingState", sol::property(&ArwingInfo::leftWingState, &ArwingInfo::leftWingState),
    "upperRightFlapYrot", sol::property(&ArwingInfo::upperRightFlapYrot, &ArwingInfo::upperRightFlapYrot),
    "bottomRightFlapYrot", sol::property(&ArwingInfo::bottomRightFlapYrot, &ArwingInfo::bottomRightFlapYrot),
    "upperLeftFlapYrot", sol::property(&ArwingInfo::upperLeftFlapYrot, &ArwingInfo::upperLeftFlapYrot),
    "bottomLeftFlapYrot", sol::property(&ArwingInfo::bottomLeftFlapYrot, &ArwingInfo::bottomLeftFlapYrot),
    "laserGunsYpos", sol::property(&ArwingInfo::laserGunsYpos, &ArwingInfo::laserGunsYpos),
    "laserGunsXpos", sol::property(&ArwingInfo::laserGunsXpos, &ArwingInfo::laserGunsXpos),
    "wingsXrot", sol::property(&ArwingInfo::wingsXrot, &ArwingInfo::wingsXrot),
    "wingsYrot", sol::property(&ArwingInfo::wingsYrot, &ArwingInfo::wingsYrot),
    "wingsZrot", sol::property(&ArwingInfo::wingsZrot, &ArwingInfo::wingsZrot),
    "unk_28", sol::property(&ArwingInfo::unk_28, &ArwingInfo::unk_28),
    "drawFace", sol::property(&ArwingInfo::drawFace, &ArwingInfo::drawFace),
    "teamFaceXrot", sol::property(&ArwingInfo::teamFaceXrot, &ArwingInfo::teamFaceXrot),
    "teamFaceYrot", sol::property(&ArwingInfo::teamFaceYrot, &ArwingInfo::teamFaceYrot),
    "cockpitGlassXrot", sol::property(&ArwingInfo::cockpitGlassXrot, &ArwingInfo::cockpitGlassXrot)
);

lua.new_usertype<PlayerSfx>("PlayerSfx",
    "levelType", sol::property(&PlayerSfx::levelType, &PlayerSfx::levelType),
    "form", sol::property(&PlayerSfx::form, &PlayerSfx::form),
    "srcPos", sol::property(&PlayerSfx::srcPos, &PlayerSfx::srcPos),
    "srcVel", sol::property(&PlayerSfx::srcVel, &PlayerSfx::srcVel),
    "boost", sol::property(&PlayerSfx::boost, &PlayerSfx::boost),
    "brake", sol::property(&PlayerSfx::brake, &PlayerSfx::brake),
    "yVel", sol::property(&PlayerSfx::yVel, &PlayerSfx::yVel),
    "bank", sol::property(&PlayerSfx::bank, &PlayerSfx::bank),
    "zRot", sol::property(&PlayerSfx::zRot, &PlayerSfx::zRot),
    "roll", sol::property(&PlayerSfx::roll, &PlayerSfx::roll)
);

lua.new_usertype<Player>("Player",
    "unk_000", sol::property(&Player::unk_000, &Player::unk_000),
    "unk_004", sol::property(&Player::unk_004, &Player::unk_004),
    "unk_008", sol::property(&Player::unk_008, &Player::unk_008),
    "unk_00C", sol::property(&Player::unk_00C, &Player::unk_00C),
    "unk_010", sol::property(&Player::unk_010, &Player::unk_010),
    "unk_014", sol::property(&Player::unk_014, &Player::unk_014),
    "unk_018", sol::property(&Player::unk_018, &Player::unk_018),
    "unk_01C", sol::property(&Player::unk_01C, &Player::unk_01C),
    "pad20", sol::overload([] (Player& self, int index) -> char { return self.pad20[index]; }, [] (Player& self, int index, char value) { self.pad20[index] = value; }),
    "unk_028", sol::property(&Player::unk_028, &Player::unk_028),
    "unk_02C", sol::property(&Player::unk_02C, &Player::unk_02C),
    "unk_030", sol::property(&Player::unk_030, &Player::unk_030),
    "camRoll", sol::property(&Player::camRoll, &Player::camRoll),
    "pad38", sol::overload([] (Player& self, int index) -> char { return self.pad38[index]; }, [] (Player& self, int index, char value) { self.pad38[index] = value; }),
    "cam", sol::property(&Player::cam, &Player::cam),
    "camYaw", sol::property(&Player::camYaw, &Player::camYaw),
    "camPitch", sol::property(&Player::camPitch, &Player::camPitch),
    "xRock", sol::property(&Player::xRock, &Player::xRock),
    "groundPos", sol::property(&Player::groundPos, &Player::groundPos),
    "groundRotY", sol::property(&Player::groundRotY, &Player::groundRotY),
    "pos", sol::property(&Player::pos, &Player::pos),
    "yBob", sol::property(&Player::yBob, &Player::yBob),
    "xShake", sol::property(&Player::xShake, &Player::xShake),
    "bobPhase", sol::property(&Player::bobPhase, &Player::bobPhase),
    "camDist", sol::property(&Player::camDist, &Player::camDist),
    "basePos", sol::property(&Player::basePos, &Player::basePos),
    "pathWidth", sol::property(&Player::pathWidth, &Player::pathWidth),
    "pathHeight", sol::property(&Player::pathHeight, &Player::pathHeight),
    "pathFloor", sol::property(&Player::pathFloor, &Player::pathFloor),
    "unk_0A8", sol::property(&Player::unk_0A8, &Player::unk_0A8),
    "xPath", sol::property(&Player::xPath, &Player::xPath),
    "yPath", sol::property(&Player::yPath, &Player::yPath),
    "pathStep", sol::property(&Player::pathStep, &Player::pathStep),
    "xPathTarget", sol::property(&Player::xPathTarget, &Player::xPathTarget),
    "yPathTarget", sol::property(&Player::yPathTarget, &Player::yPathTarget),
    "vel", sol::property(&Player::vel, &Player::vel),
    "warpCamSpeed", sol::property(&Player::warpCamSpeed, &Player::warpCamSpeed),
    "baseSpeed", sol::property(&Player::baseSpeed, &Player::baseSpeed),
    "gravity", sol::property(&Player::gravity, &Player::gravity),
    "knockback", sol::property(&Player::knockback, &Player::knockback),
    "rot", sol::property(&Player::rot, &Player::rot),
    "rockAngle", sol::property(&Player::rockAngle, &Player::rockAngle),
    "rockPhase", sol::property(&Player::rockPhase, &Player::rockPhase),
    "bankAngle", sol::property(&Player::bankAngle, &Player::bankAngle),
    "xRot_0FC", sol::property(&Player::xRot_0FC, &Player::xRot_0FC),
    "zRot_0FC", sol::property(&Player::zRot_0FC, &Player::zRot_0FC),
    "rot_104", sol::property(&Player::rot_104, &Player::rot_104),
    "boostSpeed", sol::property(&Player::boostSpeed, &Player::boostSpeed),
    "yRot_114", sol::property(&Player::yRot_114, &Player::yRot_114),
    "pathChangeYaw", sol::property(&Player::pathChangeYaw, &Player::pathChangeYaw),
    "yRotVel_11C", sol::property(&Player::yRotVel_11C, &Player::yRotVel_11C),
    "xRot_120", sol::property(&Player::xRot_120, &Player::xRot_120),
    "pathChangePitch", sol::property(&Player::pathChangePitch, &Player::pathChangePitch),
    "pad128", sol::overload([] (Player& self, int index) -> char { return self.pad128[index]; }, [] (Player& self, int index, char value) { self.pad128[index] = value; }),
    "zRotBank", sol::property(&Player::zRotBank, &Player::zRotBank),
    "zRotBarrelRoll", sol::property(&Player::zRotBarrelRoll, &Player::zRotBarrelRoll),
    "damageShake", sol::property(&Player::damageShake, &Player::damageShake),
    "trueZpos", sol::property(&Player::trueZpos, &Player::trueZpos),
    "pad13C", sol::overload([] (Player& self, int index) -> char { return self.pad13C[index]; }, [] (Player& self, int index, char value) { self.pad13C[index] = value; }),
    "zPathVel", sol::property(&Player::zPathVel, &Player::zPathVel),
    "zPath", sol::property(&Player::zPath, &Player::zPath),
    "unk_148", sol::property(&Player::unk_148, &Player::unk_148),
    "unk_14C", sol::property(&Player::unk_14C, &Player::unk_14C),
    "unk_150", sol::property(&Player::unk_150, &Player::unk_150),
    "unk_154", sol::property(&Player::unk_154, &Player::unk_154),
    "unk_158", sol::property(&Player::unk_158, &Player::unk_158),
    "unk_15C", sol::property(&Player::unk_15C, &Player::unk_15C),
    "pad160", sol::overload([] (Player& self, int index) -> char { return self.pad160[index]; }, [] (Player& self, int index, char value) { self.pad160[index] = value; }),
    "unk_164", sol::property(&Player::unk_164, &Player::unk_164),
    "unk_168", sol::property(&Player::unk_168, &Player::unk_168),
    "unk_16C", sol::property(&Player::unk_16C, &Player::unk_16C),
    "unk_170", sol::property(&Player::unk_170, &Player::unk_170),
    "unk_174", sol::property(&Player::unk_174, &Player::unk_174),
    "unk_178", sol::property(&Player::unk_178, &Player::unk_178),
    "unk_17C", sol::property(&Player::unk_17C, &Player::unk_17C),
    "unk_180", sol::property(&Player::unk_180, &Player::unk_180),
    "unk_184", sol::property(&Player::unk_184, &Player::unk_184),
    "unk_188", sol::property(&Player::unk_188, &Player::unk_188),
    "unk_18C", sol::property(&Player::unk_18C, &Player::unk_18C),
    "unk_190", sol::property(&Player::unk_190, &Player::unk_190),
    "unk_194", sol::property(&Player::unk_194, &Player::unk_194),
    "savedAlternateView", sol::property(&Player::savedAlternateView, &Player::savedAlternateView),
    "unk_19C", sol::property(&Player::unk_19C, &Player::unk_19C),
    "unk_1A0", sol::property(&Player::unk_1A0, &Player::unk_1A0),
    "dmgType", sol::property(&Player::dmgType, &Player::dmgType),
    "pad1A8", sol::overload([] (Player& self, int index) -> char { return self.pad1A8[index]; }, [] (Player& self, int index, char value) { self.pad1A8[index] = value; }),
    "turretState", sol::property(&Player::turretState, &Player::turretState),
    "turretActor", sol::property(&Player::turretActor, &Player::turretActor),
    "pad1B8", sol::overload([] (Player& self, int index) -> char { return self.pad1B8[index]; }, [] (Player& self, int index, char value) { self.pad1B8[index] = value; }),
    "turretRecoil", sol::property(&Player::turretRecoil, &Player::turretRecoil),
    "turretLockOnCount", sol::property(&Player::turretLockOnCount, &Player::turretLockOnCount),
    "num", sol::property(&Player::num, &Player::num),
    "state", sol::property(&Player::state, &Player::state),
    "form", sol::property(&Player::form, &Player::form),
    "csState", sol::property(&Player::csState, &Player::csState),
    "grounded", sol::property(&Player::grounded, &Player::grounded),
    "meTargetIndex", sol::property(&Player::meTargetIndex, &Player::meTargetIndex),
    "rollState", sol::property(&Player::rollState, &Player::rollState),
    "rollInputTimerL", sol::property(&Player::rollInputTimerL, &Player::rollInputTimerL),
    "rollInputTimerR", sol::property(&Player::rollInputTimerR, &Player::rollInputTimerR),
    "rollTimer", sol::property(&Player::rollTimer, &Player::rollTimer),
    "rollRate", sol::property(&Player::rollRate, &Player::rollRate),
    "baseRollRate", sol::property(&Player::baseRollRate, &Player::baseRollRate),
    "hitTimer", sol::property(&Player::hitTimer, &Player::hitTimer),
    "csTimer", sol::property(&Player::csTimer, &Player::csTimer),
    "csEventTimer", sol::property(&Player::csEventTimer, &Player::csEventTimer),
    "dmgEffect", sol::property(&Player::dmgEffect, &Player::dmgEffect),
    "wingPosition", sol::property(&Player::wingPosition, &Player::wingPosition),
    "unk_208", sol::property(&Player::unk_208, &Player::unk_208),
    "unk_20C", sol::property(&Player::unk_20C, &Player::unk_20C),
    "pathChangeTimer", sol::property(&Player::pathChangeTimer, &Player::pathChangeTimer),
    "timer_214", sol::property(&Player::timer_214, &Player::timer_214),
    "timer_218", sol::property(&Player::timer_218, &Player::timer_218),
    "hitDirection", sol::property(&Player::hitDirection, &Player::hitDirection),
    "radioDamageTimer", sol::property(&Player::radioDamageTimer, &Player::radioDamageTimer),
    "dmgEffectTimer", sol::property(&Player::dmgEffectTimer, &Player::dmgEffectTimer),
    "flags_228", sol::property(&Player::flags_228, &Player::flags_228),
    "whooshTimer", sol::property(&Player::whooshTimer, &Player::whooshTimer),
    "unk_230", sol::property(&Player::unk_230, &Player::unk_230),
    "draw", sol::property(&Player::draw, &Player::draw),
    "alternateView", sol::property(&Player::alternateView, &Player::alternateView),
    "shadowing", sol::property(&Player::shadowing, &Player::shadowing),
    "hideShadow", sol::property(&Player::hideShadow, &Player::hideShadow),
    "shotTimer", sol::property(&Player::shotTimer, &Player::shotTimer),
    "shadowRotX", sol::property(&Player::shadowRotX, &Player::shadowRotX),
    "shadowRotZ", sol::property(&Player::shadowRotZ, &Player::shadowRotZ),
    "unk_250", sol::property(&Player::unk_250, &Player::unk_250),
    "pad254", sol::overload([] (Player& self, int index) -> char { return self.pad254[index]; }, [] (Player& self, int index, char value) { self.pad254[index] = value; }),
    "meteoWarpSpinSpeed", sol::property(&Player::meteoWarpSpinSpeed, &Player::meteoWarpSpinSpeed),
    "contrailScale", sol::property(&Player::contrailScale, &Player::contrailScale),
    "pad260", sol::overload([] (Player& self, int index) -> char { return self.pad260[index]; }, [] (Player& self, int index, char value) { self.pad260[index] = value; }),
    "shields", sol::property(&Player::shields, &Player::shields),
    "damage", sol::property(&Player::damage, &Player::damage),
    "heal", sol::property(&Player::heal, &Player::heal),
    "unk_270", sol::property(&Player::unk_270, &Player::unk_270),
    "pad274", sol::overload([] (Player& self, int index) -> char { return self.pad274[index]; }, [] (Player& self, int index, char value) { self.pad274[index] = value; }),
    "timer_278", sol::property(&Player::timer_278, &Player::timer_278),
    "meteoWarpTimer", sol::property(&Player::meteoWarpTimer, &Player::meteoWarpTimer),
    "barrelRollAlpha", sol::property(&Player::barrelRollAlpha, &Player::barrelRollAlpha),
    "unk_284", sol::property(&Player::unk_284, &Player::unk_284),
    "attacker", sol::property(&Player::attacker, &Player::attacker),
    "pad28C", sol::overload([] (Player& self, int index) -> char { return self.pad28C[index]; }, [] (Player& self, int index, char value) { self.pad28C[index] = value; }),
    "boostCooldown", sol::property(&Player::boostCooldown, &Player::boostCooldown),
    "boostActive", sol::property(&Player::boostActive, &Player::boostActive),
    "boostMeter", sol::property(&Player::boostMeter, &Player::boostMeter),
    "unk_2C0", sol::property(&Player::unk_2C0, &Player::unk_2C0),
    "deflectCount", sol::property(&Player::deflectCount, &Player::deflectCount),
    "hit2", sol::property(&Player::hit2, &Player::hit2),
    "hit1", sol::property(&Player::hit1, &Player::hit1),
    "hit3", sol::property(&Player::hit3, &Player::hit3),
    "hit4", sol::property(&Player::hit4, &Player::hit4),
    "jointTable", sol::property(&Player::jointTable, &Player::jointTable),
    "sfxSource", sol::property(&Player::sfxSource, &Player::sfxSource),
    "sfxVel", sol::property(&Player::sfxVel, &Player::sfxVel),
    "sfx", sol::property(&Player::sfx, &Player::sfx),
    "mercyTimer", sol::property(&Player::mercyTimer, &Player::mercyTimer),
    "arwing", sol::property(&Player::arwing, &Player::arwing),
    "aerobaticPitch", sol::property(&Player::aerobaticPitch, &Player::aerobaticPitch),
    "somersault", sol::property(&Player::somersault, &Player::somersault)
);

lua.new_usertype<Vec3f>("Vec3f",
    "x", sol::property(&Vec3f::x, &Vec3f::x),
    "y", sol::property(&Vec3f::y, &Vec3f::y),
    "z", sol::property(&Vec3f::z, &Vec3f::z),
    "asRef", &Vec3f::asRef,
    "xRef", &Vec3f::xRef,
    "yRef", &Vec3f::yRef,
    "zRef", &Vec3f::zRef,
    "asArray", &Vec3f::asArray
);

lua.new_usertype<Vec3s>("Vec3s",
    "x", sol::property(&Vec3s::x, &Vec3s::x),
    "y", sol::property(&Vec3s::y, &Vec3s::y),
    "z", sol::property(&Vec3s::z, &Vec3s::z),
    "asRef", &Vec3s::asRef,
    "xRef", &Vec3s::xRef,
    "yRef", &Vec3s::yRef,
    "zRef", &Vec3s::zRef,
    "asArray", &Vec3s::asArray
);

lua.new_usertype<PosRot>("PosRot",
    "pos", sol::property(&PosRot::pos, &PosRot::pos),
    "rot", sol::property(&PosRot::rot, &PosRot::rot),
    "asRef", &PosRot::asRef
);

lua.new_usertype<CameraPoint>("CameraPoint",
    "eye", sol::property(&CameraPoint::eye, &CameraPoint::eye),
    "at", sol::property(&CameraPoint::at, &CameraPoint::at),
    "asRef", &CameraPoint::asRef
);

lua.new_usertype<Triangle>("Triangle",
    "vtx", sol::property(&Triangle::vtx, &Triangle::vtx),
    "asRef", &Triangle::asRef
);

lua.new_usertype<PlaneF>("PlaneF",
    "normal", sol::property(&PlaneF::normal, &PlaneF::normal),
    "dist", sol::property(&PlaneF::dist, &PlaneF::dist),
    "asRef", &PlaneF::asRef
);

lua.new_usertype<PlaneI>("PlaneI",
    "normal", sol::property(&PlaneI::normal, &PlaneI::normal),
    "dist", sol::property(&PlaneI::dist, &PlaneI::dist),
    "asRef", &PlaneI::asRef
);

lua.new_usertype<OSContPad>("OSContPad",
    "button", sol::property(&OSContPad::button, &OSContPad::button),
    "stick_x", sol::property(&OSContPad::stick_x, &OSContPad::stick_x),
    "stick_y", sol::property(&OSContPad::stick_y, &OSContPad::stick_y),
    "err_no", sol::property(&OSContPad::err_no, &OSContPad::err_no),
    "gyro_x", sol::property(&OSContPad::gyro_x, &OSContPad::gyro_x),
    "gyro_y", sol::property(&OSContPad::gyro_y, &OSContPad::gyro_y),
    "right_stick_x", sol::property(&OSContPad::right_stick_x, &OSContPad::right_stick_x),
    "right_stick_y", sol::property(&OSContPad::right_stick_y, &OSContPad::right_stick_y)
);

lua.new_usertype<ImVec2>("ImVec2",
    "x", sol::property(&ImVec2::x, &ImVec2::x),
    "y", sol::property(&ImVec2::y, &ImVec2::y)
);

lua.new_usertype<ImVec4>("ImVec4",
    "x", sol::property(&ImVec4::x, &ImVec4::x),
    "y", sol::property(&ImVec4::y, &ImVec4::y),
    "z", sol::property(&ImVec4::z, &ImVec4::z),
    "w", sol::property(&ImVec4::w, &ImVec4::w)
);

lua.new_usertype<Environment>("Environment",
    "type", sol::property(&Environment::type, &Environment::type),
    "unk04", sol::property(&Environment::unk04, &Environment::unk04),
    "bgColor", sol::property(&Environment::bgColor, &Environment::bgColor),
    "seqId", sol::property(&Environment::seqId, &Environment::seqId),
    "fogR", sol::property(&Environment::fogR, &Environment::fogR),
    "fogG", sol::property(&Environment::fogG, &Environment::fogG),
    "fogB", sol::property(&Environment::fogB, &Environment::fogB),
    "fogN", sol::property(&Environment::fogN, &Environment::fogN),
    "fogF", sol::property(&Environment::fogF, &Environment::fogF),
    "lightDir", sol::property(&Environment::lightDir, &Environment::lightDir),
    "lightR", sol::property(&Environment::lightR, &Environment::lightR),
    "lightG", sol::property(&Environment::lightG, &Environment::lightG),
    "lightB", sol::property(&Environment::lightB, &Environment::lightB),
    "ambR", sol::property(&Environment::ambR, &Environment::ambR),
    "ambG", sol::property(&Environment::ambG, &Environment::ambG),
    "ambB", sol::property(&Environment::ambB, &Environment::ambB)
);

lua.new_usertype<Color_RGBA32>("Color_RGBA32",
    "r", sol::property(&Color_RGBA32::r, &Color_RGBA32::r),
    "g", sol::property(&Color_RGBA32::g, &Color_RGBA32::g),
    "b", sol::property(&Color_RGBA32::b, &Color_RGBA32::b),
    "a", sol::property(&Color_RGBA32::a, &Color_RGBA32::a)
);

lua.new_usertype<Limb>("Limb",
    "dList", sol::property(&Limb::dList, &Limb::dList),
    "trans", sol::property(&Limb::trans, &Limb::trans),
    "rot", sol::property(&Limb::rot, &Limb::rot),
    "sibling", sol::property(&Limb::sibling, &Limb::sibling),
    "child", sol::property(&Limb::child, &Limb::child)
);

lua.new_usertype<PlanetData>("PlanetData",
    "unk_0", sol::overload([] (PlanetData& self) -> u8 { return self.unk_0; }, [] (PlanetData& self, u8 value) { self.unk_0 = value; }),
    "expertMedal", sol::overload([] (PlanetData& self) -> u8 { return self.expertMedal; }, [] (PlanetData& self, u8 value) { self.expertMedal = value; }),
    "expertClear", sol::overload([] (PlanetData& self) -> u8 { return self.expertClear; }, [] (PlanetData& self, u8 value) { self.expertClear = value; }),
    "played", sol::overload([] (PlanetData& self) -> u8 { return self.played; }, [] (PlanetData& self, u8 value) { self.played = value; }),
    "normalMedal", sol::overload([] (PlanetData& self) -> u8 { return self.normalMedal; }, [] (PlanetData& self, u8 value) { self.normalMedal = value; }),
    "normalClear", sol::overload([] (PlanetData& self) -> u8 { return self.normalClear; }, [] (PlanetData& self, u8 value) { self.normalClear = value; })
);

lua.new_usertype<PlanetStats>("PlanetStats",
    "hitCount", sol::overload([] (PlanetStats& self) -> u16 { return self.hitCount; }, [] (PlanetStats& self, u16 value) { self.hitCount = value; }),
    "planetId", sol::overload([] (PlanetStats& self) -> u8 { return self.planetId; }, [] (PlanetStats& self, u8 value) { self.planetId = value; }),
    "hitCountOver256", sol::overload([] (PlanetStats& self) -> u8 { return self.hitCountOver256; }, [] (PlanetStats& self, u8 value) { self.hitCountOver256 = value; }),
    "peppyAlive", sol::overload([] (PlanetStats& self) -> u8 { return self.peppyAlive; }, [] (PlanetStats& self, u8 value) { self.peppyAlive = value; }),
    "falcoAlive", sol::overload([] (PlanetStats& self) -> u8 { return self.falcoAlive; }, [] (PlanetStats& self, u8 value) { self.falcoAlive = value; }),
    "slippyAlive", sol::overload([] (PlanetStats& self) -> u8 { return self.slippyAlive; }, [] (PlanetStats& self, u8 value) { self.slippyAlive = value; })
);

lua.new_usertype<SaveData>("SaveData",
    "planet", sol::property(&SaveData::planet, &SaveData::planet),
    "pad10", sol::overload([] (SaveData& self, int index) -> char { return self.pad10[index]; }, [] (SaveData& self, int index, char value) { self.pad10[index] = value; }),
    "soundMode", sol::property(&SaveData::soundMode, &SaveData::soundMode),
    "musicVolume", sol::property(&SaveData::musicVolume, &SaveData::musicVolume),
    "voiceVolume", sol::property(&SaveData::voiceVolume, &SaveData::voiceVolume),
    "sfxVolume", sol::property(&SaveData::sfxVolume, &SaveData::sfxVolume),
    "rankingRoute", sol::overload([] (SaveData& self, int index) -> u8 { return self.rankingRoute[index]; }, [] (SaveData& self, int index, u8 value) { self.rankingRoute[index] = value; }),
    "rankingLives", sol::overload([] (SaveData& self, int index) -> u8 { return self.rankingLives[index]; }, [] (SaveData& self, int index, u8 value) { self.rankingLives[index] = value; }),
    "rankingMedal", sol::property(&SaveData::rankingMedal, &SaveData::rankingMedal),
    "unk_EA", sol::property(&SaveData::unk_EA, &SaveData::unk_EA),
    "textLanguage", sol::property(&SaveData::textLanguage, &SaveData::textLanguage),
    "voiceLanguage", sol::property(&SaveData::voiceLanguage, &SaveData::voiceLanguage),
    "padEE", sol::overload([] (SaveData& self, int index) -> char { return self.padEE[index]; }, [] (SaveData& self, int index, char value) { self.padEE[index] = value; }),
    "GetPlanetStats", &SaveData::GetPlanetStats
);

lua.new_usertype<Save>("Save",
    "data", sol::property(&Save::data, &Save::data),
    "checksum", sol::property(&Save::checksum, &Save::checksum)
);

lua.new_usertype<SaveFile>("SaveFile",
    "save", sol::property(&SaveFile::save, &SaveFile::save),
    "backup", sol::property(&SaveFile::backup, &SaveFile::backup)
);

lua.new_usertype<Object>("Object",
    "status", sol::property(&Object::status, &Object::status),
    "id", sol::property(&Object::id, &Object::id),
    "pos", sol::property(&Object::pos, &Object::pos),
    "rot", sol::property(&Object::rot, &Object::rot),
    "asActor", &Object::asActor,
    "asBoss", &Object::asBoss,
    "asScenery", &Object::asScenery,
    "asScenery360", &Object::asScenery360,
    "asSprite", &Object::asSprite,
    "asItem", &Object::asItem,
    "asEffect", &Object::asEffect,
    "asRef", &Object::asRef
);

lua.new_usertype<ObjectInfo>("ObjectInfo",
    "draw", sol::property(&ObjectInfo::draw, &ObjectInfo::draw),
    "dList", sol::property(&ObjectInfo::dList, &ObjectInfo::dList),
    "drawType", sol::property(&ObjectInfo::drawType, &ObjectInfo::drawType),
    "action", sol::property(&ObjectInfo::action, &ObjectInfo::action),
    "hitbox", sol::property(&ObjectInfo::hitbox, &ObjectInfo::hitbox),
    "cullDistance", sol::property(&ObjectInfo::cullDistance, &ObjectInfo::cullDistance),
    "unk_14", sol::property(&ObjectInfo::unk_14, &ObjectInfo::unk_14),
    "unk_16", sol::property(&ObjectInfo::unk_16, &ObjectInfo::unk_16),
    "damage", sol::property(&ObjectInfo::damage, &ObjectInfo::damage),
    "unk_19", sol::property(&ObjectInfo::unk_19, &ObjectInfo::unk_19),
    "targetOffset", sol::property(&ObjectInfo::targetOffset, &ObjectInfo::targetOffset),
    "bonus", sol::property(&ObjectInfo::bonus, &ObjectInfo::bonus),
    "asRef", &ObjectInfo::asRef
);

lua.new_usertype<Scenery360>("Scenery360",
    "obj", sol::property(&Scenery360::obj, &Scenery360::obj),
    "info", sol::property(&Scenery360::info, &Scenery360::info),
    "pathIndex", sol::property(&Scenery360::pathIndex, &Scenery360::pathIndex),
    "unk_41", sol::overload([] (Scenery360& self, int index) -> char { return self.unk_41[index]; }, [] (Scenery360& self, int index, char value) { self.unk_41[index] = value; }),
    "sfxSource", sol::property(&Scenery360::sfxSource, &Scenery360::sfxSource),
    "unk_54", sol::property(&Scenery360::unk_54, &Scenery360::unk_54),
    "asRef", &Scenery360::asRef
);

lua.new_usertype<Scenery>("Scenery",
    "obj", sol::property(&Scenery::obj, &Scenery::obj),
    "info", sol::property(&Scenery::info, &Scenery::info),
    "index", sol::property(&Scenery::index, &Scenery::index),
    "unk_44", sol::property(&Scenery::unk_44, &Scenery::unk_44),
    "state", sol::property(&Scenery::state, &Scenery::state),
    "timer_4C", sol::property(&Scenery::timer_4C, &Scenery::timer_4C),
    "dmgType", sol::property(&Scenery::dmgType, &Scenery::dmgType),
    "dmgPart", sol::property(&Scenery::dmgPart, &Scenery::dmgPart),
    "effectVel", sol::property(&Scenery::effectVel, &Scenery::effectVel),
    "vel", sol::property(&Scenery::vel, &Scenery::vel),
    "sfxSource", sol::property(&Scenery::sfxSource, &Scenery::sfxSource),
    "pad7C", sol::overload([] (Scenery& self, int index) -> char { return self.pad7C[index]; }, [] (Scenery& self, int index, char value) { self.pad7C[index] = value; }),
    "asRef", &Scenery::asRef
);

lua.new_usertype<Sprite>("Sprite",
    "obj", sol::property(&Sprite::obj, &Sprite::obj),
    "info", sol::property(&Sprite::info, &Sprite::info),
    "index", sol::property(&Sprite::index, &Sprite::index),
    "pad44", sol::overload([] (Sprite& self, int index) -> char { return self.pad44[index]; }, [] (Sprite& self, int index, char value) { self.pad44[index] = value; }),
    "sceneryId", sol::property(&Sprite::sceneryId, &Sprite::sceneryId),
    "destroy", sol::property(&Sprite::destroy, &Sprite::destroy),
    "toLeft", sol::property(&Sprite::toLeft, &Sprite::toLeft),
    "asRef", &Sprite::asRef
);

lua.new_usertype<Item>("Item",
    "obj", sol::property(&Item::obj, &Item::obj),
    "info", sol::property(&Item::info, &Item::info),
    "index", sol::property(&Item::index, &Item::index),
    "unk_44", sol::property(&Item::unk_44, &Item::unk_44),
    "state", sol::property(&Item::state, &Item::state),
    "timer_48", sol::property(&Item::timer_48, &Item::timer_48),
    "timer_4A", sol::property(&Item::timer_4A, &Item::timer_4A),
    "collected", sol::property(&Item::collected, &Item::collected),
    "playerNum", sol::property(&Item::playerNum, &Item::playerNum),
    "unk_50", sol::property(&Item::unk_50, &Item::unk_50),
    "unk_54", sol::property(&Item::unk_54, &Item::unk_54),
    "unk_58", sol::property(&Item::unk_58, &Item::unk_58),
    "sfxSource", sol::property(&Item::sfxSource, &Item::sfxSource),
    "width", sol::property(&Item::width, &Item::width),
    "asRef", &Item::asRef
);

lua.new_usertype<Effect>("Effect",
    "obj", sol::property(&Effect::obj, &Effect::obj),
    "info", sol::property(&Effect::info, &Effect::info),
    "index", sol::property(&Effect::index, &Effect::index),
    "unk_44", sol::property(&Effect::unk_44, &Effect::unk_44),
    "unk_46", sol::property(&Effect::unk_46, &Effect::unk_46),
    "unk_48", sol::property(&Effect::unk_48, &Effect::unk_48),
    "unk_4A", sol::property(&Effect::unk_4A, &Effect::unk_4A),
    "unk_4C", sol::property(&Effect::unk_4C, &Effect::unk_4C),
    "state", sol::property(&Effect::state, &Effect::state),
    "timer_50", sol::property(&Effect::timer_50, &Effect::timer_50),
    "pad52", sol::overload([] (Effect& self, int index) -> char { return self.pad52[index]; }, [] (Effect& self, int index, char value) { self.pad52[index] = value; }),
    "vel", sol::property(&Effect::vel, &Effect::vel),
    "unk_60", sol::property(&Effect::unk_60, &Effect::unk_60),
    "scale1", sol::property(&Effect::scale1, &Effect::scale1),
    "scale2", sol::property(&Effect::scale2, &Effect::scale2),
    "unk_74", sol::property(&Effect::unk_74, &Effect::unk_74),
    "unk_78", sol::property(&Effect::unk_78, &Effect::unk_78),
    "unk_7A", sol::property(&Effect::unk_7A, &Effect::unk_7A),
    "pad7C", sol::overload([] (Effect& self, int index) -> char { return self.pad7C[index]; }, [] (Effect& self, int index, char value) { self.pad7C[index] = value; }),
    "sfxSource", sol::property(&Effect::sfxSource, &Effect::sfxSource),
    "asRef", &Effect::asRef
);

lua.new_usertype<Boss>("Boss",
    "obj", sol::property(&Boss::obj, &Boss::obj),
    "info", sol::property(&Boss::info, &Boss::info),
    "index", sol::property(&Boss::index, &Boss::index),
    "work_044", sol::property(&Boss::work_044, &Boss::work_044),
    "work_046", sol::property(&Boss::work_046, &Boss::work_046),
    "work_048", sol::property(&Boss::work_048, &Boss::work_048),
    "work_04A", sol::property(&Boss::work_04A, &Boss::work_04A),
    "animFrame", sol::property(&Boss::animFrame, &Boss::animFrame),
    "state", sol::property(&Boss::state, &Boss::state),
    "timer_050", sol::property(&Boss::timer_050, &Boss::timer_050),
    "timer_052", sol::property(&Boss::timer_052, &Boss::timer_052),
    "timer_054", sol::property(&Boss::timer_054, &Boss::timer_054),
    "timer_056", sol::property(&Boss::timer_056, &Boss::timer_056),
    "timer_058", sol::property(&Boss::timer_058, &Boss::timer_058),
    "timer_05A", sol::property(&Boss::timer_05A, &Boss::timer_05A),
    "timer_05C", sol::property(&Boss::timer_05C, &Boss::timer_05C),
    "drawShadow", sol::property(&Boss::drawShadow, &Boss::drawShadow),
    "health", sol::property(&Boss::health, &Boss::health),
    "dmgType", sol::property(&Boss::dmgType, &Boss::dmgType),
    "damage", sol::property(&Boss::damage, &Boss::damage),
    "dmgPart", sol::property(&Boss::dmgPart, &Boss::dmgPart),
    "yOffset", sol::property(&Boss::yOffset, &Boss::yOffset),
    "vel", sol::property(&Boss::vel, &Boss::vel),
    "rot_078", sol::property(&Boss::rot_078, &Boss::rot_078),
    "gravity", sol::property(&Boss::gravity, &Boss::gravity),
    "swork", sol::property(&Boss::swork, &Boss::swork),
    "fwork", sol::property(&Boss::fwork, &Boss::fwork),
    "vwork", sol::property(&Boss::vwork, &Boss::vwork),
    "scale", sol::property(&Boss::scale, &Boss::scale),
    "sfxSource", sol::property(&Boss::sfxSource, &Boss::sfxSource),
    "asRef", &Boss::asRef
);

lua.new_usertype<Actor>("Actor",
    "obj", sol::property(&Actor::obj, &Actor::obj),
    "info", sol::property(&Actor::info, &Actor::info),
    "index", sol::property(&Actor::index, &Actor::index),
    "itemDrop", sol::property(&Actor::itemDrop, &Actor::itemDrop),
    "work_046", sol::property(&Actor::work_046, &Actor::work_046),
    "work_048", sol::property(&Actor::work_048, &Actor::work_048),
    "work_04A", sol::property(&Actor::work_04A, &Actor::work_04A),
    "work_04C", sol::property(&Actor::work_04C, &Actor::work_04C),
    "counter_04E", sol::property(&Actor::counter_04E, &Actor::counter_04E),
    "iwork", sol::property(&Actor::iwork, &Actor::iwork),
    "eventType", sol::property(&Actor::eventType, &Actor::eventType),
    "animFrame", sol::property(&Actor::animFrame, &Actor::animFrame),
    "state", sol::property(&Actor::state, &Actor::state),
    "pad0BA", sol::overload([] (Actor& self, int index) -> char { return self.pad0BA[index]; }, [] (Actor& self, int index, char value) { self.pad0BA[index] = value; }),
    "timer_0BC", sol::property(&Actor::timer_0BC, &Actor::timer_0BC),
    "timer_0BE", sol::property(&Actor::timer_0BE, &Actor::timer_0BE),
    "timer_0C0", sol::property(&Actor::timer_0C0, &Actor::timer_0C0),
    "timer_0C2", sol::property(&Actor::timer_0C2, &Actor::timer_0C2),
    "timer_0C4", sol::property(&Actor::timer_0C4, &Actor::timer_0C4),
    "timer_0C6", sol::property(&Actor::timer_0C6, &Actor::timer_0C6),
    "unk_0C8", sol::property(&Actor::unk_0C8, &Actor::unk_0C8),
    "drawShadow", sol::property(&Actor::drawShadow, &Actor::drawShadow),
    "lockOnTimers", sol::overload([] (Actor& self, int index) -> u8 { return self.lockOnTimers[index]; }, [] (Actor& self, int index, u8 value) { self.lockOnTimers[index] = value; }),
    "health", sol::property(&Actor::health, &Actor::health),
    "dmgType", sol::property(&Actor::dmgType, &Actor::dmgType),
    "dmgPart", sol::property(&Actor::dmgPart, &Actor::dmgPart),
    "dmgSource", sol::property(&Actor::dmgSource, &Actor::dmgSource),
    "damage", sol::property(&Actor::damage, &Actor::damage),
    "hitPos", sol::property(&Actor::hitPos, &Actor::hitPos),
    "aiType", sol::property(&Actor::aiType, &Actor::aiType),
    "aiIndex", sol::property(&Actor::aiIndex, &Actor::aiIndex),
    "vel", sol::property(&Actor::vel, &Actor::vel),
    "rot_0F4", sol::property(&Actor::rot_0F4, &Actor::rot_0F4),
    "sfxSource", sol::property(&Actor::sfxSource, &Actor::sfxSource),
    "gravity", sol::property(&Actor::gravity, &Actor::gravity),
    "scale", sol::property(&Actor::scale, &Actor::scale),
    "fwork", sol::property(&Actor::fwork, &Actor::fwork),
    "vwork", sol::property(&Actor::vwork, &Actor::vwork),
    "asRef", &Actor::asRef
);

lua.new_usertype<IEvent>("IEvent",
    "cancelled", sol::property(&IEvent::cancelled, &IEvent::cancelled)
);

lua.new_usertype<EventListener>("EventListener",
    "priority", sol::property(&EventListener::priority, &EventListener::priority),
    "function", sol::property(&EventListener::function, &EventListener::function)
);

